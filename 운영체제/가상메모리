**메모리**는 프로그램, 프로그램 수행에 필요한 데이터 및 코드를 저장하는 장치

1. 내부 기억장치: 주기억장치 (DRAM 등의 메모리, CPU 안에 있는 레지스터와 캐쉬 
2. 외부 기억장치: 보조기억장치 (SSD, HDD)

[레지스터]

- CPU가 연산을 하면 메모리 값을 참조해야함
- CPU는 연산할 때 레지스터 값을 참조함
- 레지스터는 자료를 보관하는 매우 빠른 기억 장소인데 용량은 작음

그래서 조금 느리지만 좀 더 큰 용량인 메인 메모리를 두어서 해당 내용을 참조함(**주기억장치**)

- RAM: 데이터 임시저장, 전원이 끊어지면 데이터 지워지는 휘발성 메모리
- ROM: 전원이 끊어져도 기록된 데이터들이 반영구적으로 소멸되지 않는 비휘발성 메모리

→ 빠르지만 휘발성입니다.

⇒ 더 많은 내용을 저장하기 위해서는 느리지만 용량이 크고 비휘발성인 DISK 사용 (보조기억장치)

- CPU는 메인 메모리까지의 값만 참조할 수 있기 때문에, 보조저장장치의 값을 참조하려면 OS의 도움을 받아서 입출력 작업을 진행함
- 프로그램이 실행되는 것은 CPU가 일을 하는 것이라고 했고, CPU가 일을 하기 위해서는 프로그램의 정보가 메모리에 올라와 있어야함

메모리 관리하는 기법중 하나로 프로세스 전체가 메모리 내에 올라오지 않더라도 실행이 가능하도록 하는 기법입니다.

**가상 메모리란?**
   ⇒ 프로세스 전체가 메모리 내에 올라오지 않더라도, 실행 가능

1. 메모리 관리하는 기법중 하나
2. 물리 메모리 크기의 한계를 극복하기 위해 나온 기술 
    - 실제 메모리 크기와 상관없이 메모리 이용 가능
    - 주기억장치보다보다 큰 용량을 수행하기 위해 사용
    
    → 100MB 메모리 크기에서 200MB 크기의 프로세스를 수행할 수 있도록 함 
    
    - 실행에 필요한 부분만 메모리에 로드하고 나머지는 디스크에 둠
    - 적재 여부를 페이지테이블에 표시
    
    → 프로세스의 일부분은 페이지 단위 or 세그먼트 단위임 (현재는 대부분 페이지 단위 사용)
    
    → 현재 필요한 page만 메모리에 올리는 것을 demand paging 요구 페이징이라 함
    
    → 페이징과 스와핑 합쳐놓은 형태로 생각하면 쉬움
    
    → 메모리를 페이지 단위로 나눠 페이지 테이블을 통해 물리 메모리에 맵핑 → 필요한 페이지만을 스와핑을 통해 메모리에 올리고 나머지는 하드디스크에 둠
    

## 요구페이징

 **페이징 기법:** 컴퓨터가 메인 메모리에서 사용하기 위해 보조기억장치로부터 데이터를 저장하고 검색하는 메모리 관리 기법

- CPU가 해당 페이지를 요구할 때까지 그 페이지를 메모리에 올리지 않는 방식
(한번도 접근되지 않은 페이지는 물리 메모리에 적재 X)
- 페이지 부재 발생 → 그 때 트랩을 걸어 해당 페이지를 적재

결과적으로 메모리에 작은 양의 주소 공간만 있으면 충분히 프로세스를 수행할 수 있고, 그에 따라 더 많은 프로그램을 동시에 실행할 수 있게 함

- 페이지 부재율 낮추어 성능을 높이기!
